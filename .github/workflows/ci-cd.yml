name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  deploy_staging:
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: staging
      url: ${{ secrets.STAGING_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Deploy to Staging
        run: |
          # Set up SSH for deployment
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

          # Deploy to your staging server (replace with your actual command)
          ssh -i ~/.ssh/id_rsa user@${{ secrets.AWS_HOST }} "cd /path/to/your/app && git pull && npm install && pm2 restart app"

  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.ref == 'refs/heads/main'  # Only deploy to production on main branch
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Deploy to Production
        run: |
          # Set up SSH for deployment
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

          # Deploy to your production server (replace with your actual command)
          ssh -i ~/.ssh/id_rsa user@${{ secrets.AWS_HOST }} "cd /path/to/your/app && git pull && npm install && pm2 restart app"

  # Optional monitoring job
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Set up monitoring
        run: |
          echo "Setting up monitoring with CloudWatch or Prometheus (custom commands go here)"
